diff -rc Python-3.3.2-origin/Modules/posixmodule.c Python-3.3.2/Modules/posixmodule.c
*** Python-3.3.2-origin/Modules/posixmodule.c	2013-05-16 00:32:59.000000000 +0800
--- Python-3.3.2/Modules/posixmodule.c	2013-05-27 15:30:48.767133733 +0800
***************
*** 6117,6122 ****
--- 6117,6123 ----
      slave_fd = open(slave_name, O_RDWR | O_NOCTTY); /* open slave */
      if (slave_fd < 0)
          return posix_error();
+ #ifndef ANDROID
  #if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC)
      ioctl(slave_fd, I_PUSH, "ptem"); /* push ptem */
      ioctl(slave_fd, I_PUSH, "ldterm"); /* push ldterm */
***************
*** 6124,6129 ****
--- 6125,6131 ----
      ioctl(slave_fd, I_PUSH, "ttcompat"); /* push ttcompat */
  #endif /* __hpux */
  #endif /* HAVE_CYGWIN */
+ #endif /* ANDROID */
  #endif /* HAVE_OPENPTY */
  
      return Py_BuildValue("(ii)", master_fd, slave_fd);
diff -rc Python-3.3.2-origin/Modules/pwdmodule.c Python-3.3.2/Modules/pwdmodule.c
*** Python-3.3.2-origin/Modules/pwdmodule.c	2013-05-16 00:32:59.000000000 +0800
--- Python-3.3.2/Modules/pwdmodule.c	2013-05-27 11:08:18.003728652 +0800
***************
*** 79,86 ****
--- 79,90 ----
  #ifdef __VMS
      SETS(setIndex++, "");
  #else
+ #ifdef ANDROID
+     SETS(setIndex++, "");
+ #else
      SETS(setIndex++, p->pw_gecos);
  #endif
+ #endif
      SETS(setIndex++, p->pw_dir);
      SETS(setIndex++, p->pw_shell);
  
diff -rc Python-3.3.2-origin/Modules/socketmodule.c Python-3.3.2/Modules/socketmodule.c
*** Python-3.3.2-origin/Modules/socketmodule.c	2013-05-16 00:32:59.000000000 +0800
--- Python-3.3.2/Modules/socketmodule.c	2013-05-27 15:29:19.563134945 +0800
***************
*** 150,155 ****
--- 150,159 ----
     On the other hand, not all Linux versions agree, so there the settings
     computed by the configure script are needed! */
  
+ #ifdef ANDROID
+ #undef HAVE_GETHOSTBYNAME_R
+ #endif
+ 
  #ifndef linux
  # undef HAVE_GETHOSTBYNAME_R_3_ARG
  # undef HAVE_GETHOSTBYNAME_R_5_ARG
diff -rc Python-3.3.2-origin/Python/bltinmodule.c Python-3.3.2/Python/bltinmodule.c
*** Python-3.3.2-origin/Python/bltinmodule.c	2013-05-16 00:33:00.000000000 +0800
--- Python-3.3.2/Python/bltinmodule.c	2013-05-27 15:27:44.071136243 +0800
***************
*** 24,30 ****
  #ifdef HAVE_MBCS
  const char *Py_FileSystemDefaultEncoding = "mbcs";
  int Py_HasFileSystemDefaultEncoding = 1;
! #elif defined(__APPLE__)
  const char *Py_FileSystemDefaultEncoding = "utf-8";
  int Py_HasFileSystemDefaultEncoding = 1;
  #else
--- 24,30 ----
  #ifdef HAVE_MBCS
  const char *Py_FileSystemDefaultEncoding = "mbcs";
  int Py_HasFileSystemDefaultEncoding = 1;
! #elif defined(__APPLE__) || defined(ANDROID)
  const char *Py_FileSystemDefaultEncoding = "utf-8";
  int Py_HasFileSystemDefaultEncoding = 1;
  #else
diff -rc Python-3.3.2-origin/Python/fileutils.c Python-3.3.2/Python/fileutils.c
*** Python-3.3.2-origin/Python/fileutils.c	2013-05-16 00:33:00.000000000 +0800
--- Python-3.3.2/Python/fileutils.c	2013-05-27 15:34:00.199131131 +0800
***************
*** 98,103 ****
--- 98,104 ----
      };
  #endif
  
+ #ifndef ANDROID
      loc = setlocale(LC_CTYPE, NULL);
      if (loc == NULL)
          goto error;
***************
*** 105,110 ****
--- 106,114 ----
          /* the LC_CTYPE locale is different than C */
          return 0;
      }
+ #else
+     return 0;
+ #endif
  
  #if defined(HAVE_LANGINFO_H) && defined(CODESET)
      codeset = nl_langinfo(CODESET);
diff -rc Python-3.3.2-origin/Python/formatter_unicode.c Python-3.3.2/Python/formatter_unicode.c
*** Python-3.3.2-origin/Python/formatter_unicode.c	2013-05-16 00:33:00.000000000 +0800
--- Python-3.3.2/Python/formatter_unicode.c	2013-05-27 15:35:04.819130253 +0800
***************
*** 665,670 ****
--- 665,671 ----
  {
      switch (type) {
      case LT_CURRENT_LOCALE: {
+ #ifndef ANDROID
          struct lconv *locale_data = localeconv();
          locale_info->decimal_point = PyUnicode_DecodeLocale(
                                           locale_data->decimal_point,
***************
*** 680,685 ****
--- 681,687 ----
          }
          locale_info->grouping = locale_data->grouping;
          break;
+ #endif
      }
      case LT_DEFAULT_LOCALE:
          locale_info->decimal_point = PyUnicode_FromOrdinal('.');
diff -rc Python-3.3.2-origin/Python/pystrtod.c Python-3.3.2/Python/pystrtod.c
*** Python-3.3.2-origin/Python/pystrtod.c	2013-05-16 00:33:00.000000000 +0800
--- Python-3.3.2/Python/pystrtod.c	2013-05-27 15:58:40.015111022 +0800
***************
*** 177,184 ****
--- 177,188 ----
  
      fail_pos = NULL;
  
+ #ifndef ANDROID
      locale_data = localeconv();
      decimal_point = locale_data->decimal_point;
+ #else
+     decimal_point = ".";
+ #endif
      decimal_point_len = strlen(decimal_point);
  
      assert(decimal_point_len != 0);
***************
*** 378,385 ****
--- 382,393 ----
  Py_LOCAL_INLINE(void)
  change_decimal_from_locale_to_dot(char* buffer)
  {
+ #ifndef ANDROID
      struct lconv *locale_data = localeconv();
      const char *decimal_point = locale_data->decimal_point;
+ #else
+     const char *decimal_point = ".";
+ #endif
  
      if (decimal_point[0] != '.' || decimal_point[1] != 0) {
          size_t decimal_point_len = strlen(decimal_point);
diff -rc Python-3.3.2-origin/setup.py Python-3.3.2/setup.py
*** Python-3.3.2-origin/setup.py	2013-05-16 00:33:00.000000000 +0800
--- Python-3.3.2/setup.py	2013-05-27 15:26:30.555137242 +0800
***************
*** 31,37 ****
  COMPILED_WITH_PYDEBUG = ('--with-pydebug' in sysconfig.get_config_var("CONFIG_ARGS"))
  
  # This global variable is used to hold the list of modules to be disabled.
! disabled_module_list = []
  
  def add_dir_to_list(dirlist, dir):
      """Add the directory 'dir' to the list 'dirlist' (after any relative
--- 31,37 ----
  COMPILED_WITH_PYDEBUG = ('--with-pydebug' in sysconfig.get_config_var("CONFIG_ARGS"))
  
  # This global variable is used to hold the list of modules to be disabled.
! disabled_module_list = ['spwd', '_ctypes','bz2','ossaudiodev','_curses','_curses_panel','readline','_locale','_bsddb','gdbm','dbm','nis','linuxaudiodev','crypt','_multiprocessing']
  
  def add_dir_to_list(dirlist, dir):
      """Add the directory 'dir' to the list 'dirlist' (after any relative
